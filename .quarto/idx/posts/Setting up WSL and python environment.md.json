{"title":"How To Setup WSL and Python for FastAI","markdown":{"yaml":{"date":"2024-11-14","image":"images/new.jpg","layout":"post","description":"How to setup Your Deep learning environment for fastai","title":"How To Setup WSL and Python for FastAI","categories":["computer_usage"]},"headingText":"How to install WSL in windows","containsRefs":false,"markdown":"\n\n\nWSL implies for Windows Subsystem for Linux (WSL), where you can run a Linux environment on your Windows machine without the hassle of dual-booting or setting up a virtual machine. This guide will take you through the steps to install WSL, focusing on WSL 2, which is faster, better, and more compatible than its predecessor.\n\nThe basic prerequisits are that You need Windows 10 version 2004 or higher (Build 19041 and above) or Windows 11. If you’re still rocking an older version, it might be time for an upgrade—like swapping out your flip phone for a smartphone!\n\nIf you get any error related to virtualization. You need to have virtualization enabled which you can do by enabling Hyper V in your device\n\n## Step 1: Enable WSL:\n\n**Open PowerShell as Administrator**: Search for \"PowerShell\" in the Start menu. Right-click on it and select \"Run as administrator\". If you get intimidated by the black screen don't panik you are inside terminal which helps us to execute commands. More on it later!\n**Run the Installation Command**: In the PowerShell window, type the following command and press Enter\n\n```\nwsl --install\n```\n\nThis command will enable all the necessary features for WSL, download the Linux Kernel, and install Ubuntu as your default distribution. A restart may be required.\n\nIf ubuntu is not your cup of tea then you can choose another distribution by\n\n```\nwsl --install -d Debian\n```\n\nfor debian\n\n## Step 2: Make a user account\n\nAfter installation, launch your installed Linux distribution from the Start menu\n\nYou’ll be prompted to create a **username** and **password**. Choose wisely this is your secret identity! Remember, while typing your password, nothing will appear on the screen; this is normal behavior in Linux. It’s not broken; it’s just shy.\n\n\n## Step 4: Update the system\n\nNow that you’ve got your Linux environment set up, let’s make sure it’s up to date: you can do that by just typing\n```\nsudo apt update\nsudo apt upgrade\n```\n\n# Terminal and CLI\n\nOkay so now as you are staring at that black window let's talk a little bit about terminal and cli\n\nA **terminal** is essentially a user interface that allows you to interact with your computer using text-based commands.\n\n**CLI** or command line interface is the way we interact with the computer in text format.\n\nNow by now 2 questions will arise in your mind by now -\n\n- Why are we using WSL why not use windows\nThe programs we will be using are much more easier to operate on Linux than windows, you can modify linux in many ways in order to make your life easier than it is in windows.\n\n- Why are we using CLI why not use the graphical apps which are more beautiful ?\nOnce you get the hang of it, typing commands can be faster than clicking through menus. You can write scripts to automate repetitive tasks saving time and effort.\n\n## Some basic definitions and tools handy in cli\n\nSo here are some popular commands and definitions which we need to keep in mind while we use CLI\n\ndirectory - for most cases directory is your 'folder' we can store different files and directories in a directory.\n\n `ls` : Lists the contents of a directory. Use options like `-a` for hidden files or `-l` for detailed information.\n\n`cd [directory]`: Changes the current directory to the specified one. Use `cd ..` to go back\n\n`mkdir [dirname]`: Creates a new directory with the specified name.\n\n`rm -rf [dirname]` : Removes a directory and everything in it. This is done without confirmation so know what you are doing\n\n# Installing python and other dependencies\n\nNow if you type `python` on your terminal you will see that some application is getting activated.\n\nNow the python that has been activated is not the python we are gonna use. This python is used by the system to run stuff. We are gonna something called **miniforge** for python.\n\nHere are the steps in setting up miniforge in your system -\n\n## Step 1: Install wget in you system\n\nyou can do so by executing -\n```\nsudo apt install wget\n```\n\n## Step 2: Download the setup script for miniforge\n\nyou can do that by following these commands\n\n### for x86_64\n\n```\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\n```\n\n### for arm\n\n```\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh\n```\n\nthis will download the Miniforge installer in your WSL\n\n## Step 3: Install miniforge in your WSL\n\nexecute the following command -\n\n### For x86_64\n```\nbash Miniforge3-Linux-x86_64.sh\n```\n\n### For Arm\n\n```\nbash Miniforge3-Linux-aarch64.sh\n```\n\nA simple setup will appear which will ask you to accept the licence agreement\n\n\nThen a prompt will appear telling you that setup will install miniforge in your home directory say yes to it\n\nAnd then miniforge will install not only python but a whole bunch of libraries which will come handy to us later.\n\nrestart you shell by executing `bash` to make it initialize miniforge\n\n## Step 4: Agree to initialize it\n\nIt will ask you if you want to initialize it whenever you start your machine and say yes to it.\n\nWhat it will do is that it will execute python everytime we launch wsl\n\n## Mamba and conda\n\nMamba and Conda are both powerful tools used for package and environment management in Python. They install everything we need for python and help us create virtual environments. This brings us to -\n## Step 5: Enable virtual environment\n\nA virtual environment is a self-contained directory that allows you to manage dependencies for different projects without stepping on each other’s toes. It will help seperate python we need with the system python\n\nTo create a virtual environment just execute:\n\n```\nmamba create -n fastai_env python=3.9\n```\n\nthis will create a python virtual environment\n\nbut that's not all we also need to activate it for it to work this is done by executing\n\n```\nmamba activate fastai_env\n```\n\n- A pro tip - You can activate the virtual environment everytime you want by putting it in your .bashrc file. You can do that by\n\n```\nnano .bashrc\n```\n\nthis opens a text editor which we will use to edit files. Edit it by adding `mamba activate fastai_env` at the end of the file.\n\nthen press ctrl + x to exit and y to save the file.\n\n\n## Step 6: Installing ipython and jupyter lab\n\n### Need for these tools\nIf you’re ready to kick your AI game up a notch, you need to get cozy with **IPython**, **JupyterLab**, **nbdev**. We have so many good reasons to use these tools\n\nWe will use Ipython because\n\n- It helps us to display media like Images, Videos etc\n- IPython includes special commands (prefixed with `%` or `%%`) that allow you to perform tasks like timing execution or running shell commands seamlessly.\n- With improved tracebacks and debugging capabilities, it makes troubleshooting easier.\n\nWe will use Jupyter Lab because -\n\n- Multi document UI - Open multiple notebooks, text files, and terminals all at once. You can juggle your projects too. No more switching tabs.\n\n- **Extensions Galore**: Want to customize your experience? JupyterLab supports extensions that let you add new features or integrate with other tools. It’s like dressing up your notebook in the latest fashion make it yours\n\n- **Interactive Widgets**: Create interactive visualizations and controls right in your notebooks. Want to tweak parameters on the fly? Just slide those sliders.\n\nnbdev is Important because\n\n1. **Literate Programming**: Write code, tests, and documentation together in Jupyter notebooks, enhancing readability and maintainability.\n2. **Automatic Documentation**: Generate up-to-date documentation directly from your notebooks, streamlining the process of creating and maintaining libraries.\n3. **Integrated Testing**: Write and run unit tests within your notebooks, ensuring code quality with automatic execution during builds and CI/CD processes.\n\n\nBasically they help is making the experiance smoother for the journey.\n### Installation\n\nHere is the command to install these tools -\n\n```\nmamba install ipython jupyterlab nbdev\n```\n\n## Step 7: Install pytorch\n\nPyTorch is a powerful and flexible tool for deep learning and machine learning projects. Here are some of its features\n\n- **Dynamic Computation Graphs**: Allows changes to the model on-the-fly, making debugging easier.\n- **Tensor Operations**: Supports efficient tensor computations with GPU acceleration for faster processing.\n- **User-Friendly**: Intuitive and Pythonic interface, great for beginners and experienced users alike.\n- **Rich Ecosystem**: Includes libraries for building neural networks and optimization, simplifying model development.\n- **Strong Community**: Extensive documentation and active community support for learning and troubleshooting.\n\n### Installation\n\nHere is how to get it installed -\n\n\n- For devices with Nvidia GPU - if your device have an Nvidia GPU then you can install pytorch with CUDA support by executing following command -\n\n```\nmamba install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia\n```\n\nYou will also need to install the cuda toolkit for pytorch to work. You can do it by executing -\n\n```\n\nwget https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.35.03_linux.run\n```\n\nThen run\n\n```\nsudo sh cuda_12.6.2_560.35.03_linux.run\n```\n\n\n\n- For devices with integrated graphics - If you are poor student like me and have device with integrated graphics then you should install pytorch by using following command -\n\n```\nmamba install pytorch torchvision torchaudio cpuonly -c pytorch\n```\n\n## Step 8: Install FastAI\n\nFast AI will be the main library we will be working with. It is designed to make deep learning accessible to everyone, regardless of their coding experience. It is is built on top of PyTorch designed to make the complex realm of artificial intelligence as approachable as your favorite recipe for instant noodles.\n\n### Installation\n\nTo install it just execute this command in your terminal -\n\n```\nmamba install -c fastai fastai\n```\n\nAnd you have successfully installed the tools required for the course.\n\n# Optional stuff\n\n## Vim\n\nVim is the most supereme cli text editor that one can use in linux. Here is how to install and use it\n\n1. **Open WSL Terminal**:\n   - Launch your WSL terminal.\n\n2. **Update Package List**:\n   - Before installing any software, update the package list by running:\n     ```\n     sudo apt update\n     ```\n\n3. **Install Vim**:\n   - Install Vim by executing the following command:\n     ```\n     sudo apt install vim -y\n     ```\n   - This command retrieves and installs Vim along with its necessary components.\n\n4. **Launching Vim**:\n   - To create or edit a file, use the command:\n     ```\n     vim filename.txt\n     ```\n   - Replace `filename.txt` with your desired file name. If the file does not exist, Vim will create it.\n\n5. **Basic Navigation and Editing**:\n   - Upon opening a file, you start in **Normal mode**. Press `i` to switch to **Insert mode**, where you can type text.\n   - To return to Normal mode, press `Esc`.\n   - You can go up down left and right in the document by either using arrow keys or using h,j,k,l keys (right,down,up,left).\n\n6. **Saving and Exiting**:\n   - To save changes, type `:w` and press `Enter`.\n   - To exit Vim, type `:q` and press `Enter`. If you want to save and exit simultaneously, type `:wq`.\n\n\n## Ranger\n\nRanger is a cli file manager which you can use to navigate through files easily.\n\nTo install and use Ranger, a VIM-inspired file manager, in Windows Subsystem for Linux (WSL), follow these detailed steps:\n\n## Installation Steps\n\n1. **Open WSL Terminal**:\n   - Launch your WSL terminal\n\n2. **Install Prerequisites**:\n   - Update the package list and install the necessary packages (`make`, `git`, and `vim`) by running:\n     ```\n     sudo apt update\n     sudo apt install make git vim -y\n     ```\n\n3. **Install Ranger**:\n\n   ```\n   sudo apt install ranger -y\n   ```\n\n4. **Configure Ranger**:\n   - Run Ranger once to create the configuration directory:\n     ```bash\n     ranger\n     ```\n\n\n## Using Ranger\n\n1. **Launching Ranger**:\n   - Start Ranger by typing:\n     ```bash\n     ranger\n     ```\n\n2. **Interface Overview**:\n   - The interface is divided into three columns:\n     - **Left Column**: Displays the parent directory.\n     - **Middle Column**: Shows contents of the current directory.\n     - **Right Column**: Provides a preview of the selected file or folder.\n\n3. **Basic Navigation**:\n   - Use the following keys to navigate:\n     - Arrow keys or `h`, `j`, `k`, `l` for left, down, up, and right respectively.\n     - `Enter` to open a file or directory.\n     - `q` to quit.\n\n### Copying, Pasting, and Deleting Files\n\n- **Copying Files**:\n  - To copy a file or directory, navigate to it and press `yy` (yank).\n  - To copy multiple files, select them using `Space` and then press `yy`.\n\n- **Pasting Files**:\n  - Navigate to the destination directory and press `p` to paste the copied files.\n\n- **Deleting Files**:\n  - To delete a file or directory, navigate to it and press `dd` (delete).\n  - Confirm the deletion when prompted.\n\n","srcMarkdownNoYaml":"\n\n# How to install WSL in windows\n\nWSL implies for Windows Subsystem for Linux (WSL), where you can run a Linux environment on your Windows machine without the hassle of dual-booting or setting up a virtual machine. This guide will take you through the steps to install WSL, focusing on WSL 2, which is faster, better, and more compatible than its predecessor.\n\nThe basic prerequisits are that You need Windows 10 version 2004 or higher (Build 19041 and above) or Windows 11. If you’re still rocking an older version, it might be time for an upgrade—like swapping out your flip phone for a smartphone!\n\nIf you get any error related to virtualization. You need to have virtualization enabled which you can do by enabling Hyper V in your device\n\n## Step 1: Enable WSL:\n\n**Open PowerShell as Administrator**: Search for \"PowerShell\" in the Start menu. Right-click on it and select \"Run as administrator\". If you get intimidated by the black screen don't panik you are inside terminal which helps us to execute commands. More on it later!\n**Run the Installation Command**: In the PowerShell window, type the following command and press Enter\n\n```\nwsl --install\n```\n\nThis command will enable all the necessary features for WSL, download the Linux Kernel, and install Ubuntu as your default distribution. A restart may be required.\n\nIf ubuntu is not your cup of tea then you can choose another distribution by\n\n```\nwsl --install -d Debian\n```\n\nfor debian\n\n## Step 2: Make a user account\n\nAfter installation, launch your installed Linux distribution from the Start menu\n\nYou’ll be prompted to create a **username** and **password**. Choose wisely this is your secret identity! Remember, while typing your password, nothing will appear on the screen; this is normal behavior in Linux. It’s not broken; it’s just shy.\n\n\n## Step 4: Update the system\n\nNow that you’ve got your Linux environment set up, let’s make sure it’s up to date: you can do that by just typing\n```\nsudo apt update\nsudo apt upgrade\n```\n\n# Terminal and CLI\n\nOkay so now as you are staring at that black window let's talk a little bit about terminal and cli\n\nA **terminal** is essentially a user interface that allows you to interact with your computer using text-based commands.\n\n**CLI** or command line interface is the way we interact with the computer in text format.\n\nNow by now 2 questions will arise in your mind by now -\n\n- Why are we using WSL why not use windows\nThe programs we will be using are much more easier to operate on Linux than windows, you can modify linux in many ways in order to make your life easier than it is in windows.\n\n- Why are we using CLI why not use the graphical apps which are more beautiful ?\nOnce you get the hang of it, typing commands can be faster than clicking through menus. You can write scripts to automate repetitive tasks saving time and effort.\n\n## Some basic definitions and tools handy in cli\n\nSo here are some popular commands and definitions which we need to keep in mind while we use CLI\n\ndirectory - for most cases directory is your 'folder' we can store different files and directories in a directory.\n\n `ls` : Lists the contents of a directory. Use options like `-a` for hidden files or `-l` for detailed information.\n\n`cd [directory]`: Changes the current directory to the specified one. Use `cd ..` to go back\n\n`mkdir [dirname]`: Creates a new directory with the specified name.\n\n`rm -rf [dirname]` : Removes a directory and everything in it. This is done without confirmation so know what you are doing\n\n# Installing python and other dependencies\n\nNow if you type `python` on your terminal you will see that some application is getting activated.\n\nNow the python that has been activated is not the python we are gonna use. This python is used by the system to run stuff. We are gonna something called **miniforge** for python.\n\nHere are the steps in setting up miniforge in your system -\n\n## Step 1: Install wget in you system\n\nyou can do so by executing -\n```\nsudo apt install wget\n```\n\n## Step 2: Download the setup script for miniforge\n\nyou can do that by following these commands\n\n### for x86_64\n\n```\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\n```\n\n### for arm\n\n```\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh\n```\n\nthis will download the Miniforge installer in your WSL\n\n## Step 3: Install miniforge in your WSL\n\nexecute the following command -\n\n### For x86_64\n```\nbash Miniforge3-Linux-x86_64.sh\n```\n\n### For Arm\n\n```\nbash Miniforge3-Linux-aarch64.sh\n```\n\nA simple setup will appear which will ask you to accept the licence agreement\n\n\nThen a prompt will appear telling you that setup will install miniforge in your home directory say yes to it\n\nAnd then miniforge will install not only python but a whole bunch of libraries which will come handy to us later.\n\nrestart you shell by executing `bash` to make it initialize miniforge\n\n## Step 4: Agree to initialize it\n\nIt will ask you if you want to initialize it whenever you start your machine and say yes to it.\n\nWhat it will do is that it will execute python everytime we launch wsl\n\n## Mamba and conda\n\nMamba and Conda are both powerful tools used for package and environment management in Python. They install everything we need for python and help us create virtual environments. This brings us to -\n## Step 5: Enable virtual environment\n\nA virtual environment is a self-contained directory that allows you to manage dependencies for different projects without stepping on each other’s toes. It will help seperate python we need with the system python\n\nTo create a virtual environment just execute:\n\n```\nmamba create -n fastai_env python=3.9\n```\n\nthis will create a python virtual environment\n\nbut that's not all we also need to activate it for it to work this is done by executing\n\n```\nmamba activate fastai_env\n```\n\n- A pro tip - You can activate the virtual environment everytime you want by putting it in your .bashrc file. You can do that by\n\n```\nnano .bashrc\n```\n\nthis opens a text editor which we will use to edit files. Edit it by adding `mamba activate fastai_env` at the end of the file.\n\nthen press ctrl + x to exit and y to save the file.\n\n\n## Step 6: Installing ipython and jupyter lab\n\n### Need for these tools\nIf you’re ready to kick your AI game up a notch, you need to get cozy with **IPython**, **JupyterLab**, **nbdev**. We have so many good reasons to use these tools\n\nWe will use Ipython because\n\n- It helps us to display media like Images, Videos etc\n- IPython includes special commands (prefixed with `%` or `%%`) that allow you to perform tasks like timing execution or running shell commands seamlessly.\n- With improved tracebacks and debugging capabilities, it makes troubleshooting easier.\n\nWe will use Jupyter Lab because -\n\n- Multi document UI - Open multiple notebooks, text files, and terminals all at once. You can juggle your projects too. No more switching tabs.\n\n- **Extensions Galore**: Want to customize your experience? JupyterLab supports extensions that let you add new features or integrate with other tools. It’s like dressing up your notebook in the latest fashion make it yours\n\n- **Interactive Widgets**: Create interactive visualizations and controls right in your notebooks. Want to tweak parameters on the fly? Just slide those sliders.\n\nnbdev is Important because\n\n1. **Literate Programming**: Write code, tests, and documentation together in Jupyter notebooks, enhancing readability and maintainability.\n2. **Automatic Documentation**: Generate up-to-date documentation directly from your notebooks, streamlining the process of creating and maintaining libraries.\n3. **Integrated Testing**: Write and run unit tests within your notebooks, ensuring code quality with automatic execution during builds and CI/CD processes.\n\n\nBasically they help is making the experiance smoother for the journey.\n### Installation\n\nHere is the command to install these tools -\n\n```\nmamba install ipython jupyterlab nbdev\n```\n\n## Step 7: Install pytorch\n\nPyTorch is a powerful and flexible tool for deep learning and machine learning projects. Here are some of its features\n\n- **Dynamic Computation Graphs**: Allows changes to the model on-the-fly, making debugging easier.\n- **Tensor Operations**: Supports efficient tensor computations with GPU acceleration for faster processing.\n- **User-Friendly**: Intuitive and Pythonic interface, great for beginners and experienced users alike.\n- **Rich Ecosystem**: Includes libraries for building neural networks and optimization, simplifying model development.\n- **Strong Community**: Extensive documentation and active community support for learning and troubleshooting.\n\n### Installation\n\nHere is how to get it installed -\n\n\n- For devices with Nvidia GPU - if your device have an Nvidia GPU then you can install pytorch with CUDA support by executing following command -\n\n```\nmamba install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia\n```\n\nYou will also need to install the cuda toolkit for pytorch to work. You can do it by executing -\n\n```\n\nwget https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.35.03_linux.run\n```\n\nThen run\n\n```\nsudo sh cuda_12.6.2_560.35.03_linux.run\n```\n\n\n\n- For devices with integrated graphics - If you are poor student like me and have device with integrated graphics then you should install pytorch by using following command -\n\n```\nmamba install pytorch torchvision torchaudio cpuonly -c pytorch\n```\n\n## Step 8: Install FastAI\n\nFast AI will be the main library we will be working with. It is designed to make deep learning accessible to everyone, regardless of their coding experience. It is is built on top of PyTorch designed to make the complex realm of artificial intelligence as approachable as your favorite recipe for instant noodles.\n\n### Installation\n\nTo install it just execute this command in your terminal -\n\n```\nmamba install -c fastai fastai\n```\n\nAnd you have successfully installed the tools required for the course.\n\n# Optional stuff\n\n## Vim\n\nVim is the most supereme cli text editor that one can use in linux. Here is how to install and use it\n\n1. **Open WSL Terminal**:\n   - Launch your WSL terminal.\n\n2. **Update Package List**:\n   - Before installing any software, update the package list by running:\n     ```\n     sudo apt update\n     ```\n\n3. **Install Vim**:\n   - Install Vim by executing the following command:\n     ```\n     sudo apt install vim -y\n     ```\n   - This command retrieves and installs Vim along with its necessary components.\n\n4. **Launching Vim**:\n   - To create or edit a file, use the command:\n     ```\n     vim filename.txt\n     ```\n   - Replace `filename.txt` with your desired file name. If the file does not exist, Vim will create it.\n\n5. **Basic Navigation and Editing**:\n   - Upon opening a file, you start in **Normal mode**. Press `i` to switch to **Insert mode**, where you can type text.\n   - To return to Normal mode, press `Esc`.\n   - You can go up down left and right in the document by either using arrow keys or using h,j,k,l keys (right,down,up,left).\n\n6. **Saving and Exiting**:\n   - To save changes, type `:w` and press `Enter`.\n   - To exit Vim, type `:q` and press `Enter`. If you want to save and exit simultaneously, type `:wq`.\n\n\n## Ranger\n\nRanger is a cli file manager which you can use to navigate through files easily.\n\nTo install and use Ranger, a VIM-inspired file manager, in Windows Subsystem for Linux (WSL), follow these detailed steps:\n\n## Installation Steps\n\n1. **Open WSL Terminal**:\n   - Launch your WSL terminal\n\n2. **Install Prerequisites**:\n   - Update the package list and install the necessary packages (`make`, `git`, and `vim`) by running:\n     ```\n     sudo apt update\n     sudo apt install make git vim -y\n     ```\n\n3. **Install Ranger**:\n\n   ```\n   sudo apt install ranger -y\n   ```\n\n4. **Configure Ranger**:\n   - Run Ranger once to create the configuration directory:\n     ```bash\n     ranger\n     ```\n\n\n## Using Ranger\n\n1. **Launching Ranger**:\n   - Start Ranger by typing:\n     ```bash\n     ranger\n     ```\n\n2. **Interface Overview**:\n   - The interface is divided into three columns:\n     - **Left Column**: Displays the parent directory.\n     - **Middle Column**: Shows contents of the current directory.\n     - **Right Column**: Provides a preview of the selected file or folder.\n\n3. **Basic Navigation**:\n   - Use the following keys to navigate:\n     - Arrow keys or `h`, `j`, `k`, `l` for left, down, up, and right respectively.\n     - `Enter` to open a file or directory.\n     - `q` to quit.\n\n### Copying, Pasting, and Deleting Files\n\n- **Copying Files**:\n  - To copy a file or directory, navigate to it and press `yy` (yank).\n  - To copy multiple files, select them using `Space` and then press `yy`.\n\n- **Pasting Files**:\n  - Navigate to the destination directory and press `p` to paste the copied files.\n\n- **Deleting Files**:\n  - To delete a file or directory, navigate to it and press `dd` (delete).\n  - Confirm the deletion when prompted.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"Setting up WSL and python environment.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"darkly","date":"2024-11-14","image":"images/new.jpg","layout":"post","description":"How to setup Your Deep learning environment for fastai","title":"How To Setup WSL and Python for FastAI","categories":["computer_usage"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}